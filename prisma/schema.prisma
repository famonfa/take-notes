generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Subject {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  userId      String
  createdAt   DateTime
  updatedAt   DateTime
  color       String
  posts       Post[]
}

model Post {
  id              Int               @id @default(autoincrement())
  subjectId       Int
  name            String
  createdAt       DateTime
  subject         Subject?          @relation(fields: [subjectId], references: [id])
  postInformation PostInformation[]
  comment         Comment[]
}

model PostInformation {
  id               Int    @id @default(autoincrement())
  extendedPostInfo Json?
  postInfoHtml     String
  postId           Int
  post             Post?  @relation(fields: [postId], references: [id])
}

model Comment {
  id        Int           @id @default(autoincrement())
  userId    String
  comment   String
  createdAt DateTime
  postId    Int
  post      Post?         @relation(fields: [postId], references: [id])
  user      User?         @relation(fields: [userId], references: [id])
  likeCount Int           @default(0)
  Like      CommentLike[]
}

model CommentLike {
  Id        String  @id @default(cuid())
  commentId Int
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  comment   Comment @relation(fields: [commentId], references: [id])
}

// model User {
//   id          String     @id @default(uuid())
//   email       String     @unique
//   username    String     @unique
//   password    String
//   description String
//   createdAt   DateTime   @default(now())
//   updatedAt   DateTime   @updatedAt
//   followers   Follower[] @relation("UserToFollowers")
//   following   Follower[] @relation("UserToFollowing")
// }

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  username      String?       @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Comment       Comment[]
  CommentLike   CommentLike[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
